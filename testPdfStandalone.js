/**
 * PDF Test - Standalone Hebrew Support (No External Binaries)
 * Tests PDF generation using pure JavaScript libraries (jsPDF)
 * This version requires NO external binaries - completely standalone
 */

async function testStandalonePdfGeneration() {
    ColorLog.CB('🚀 Starting Standalone PDF Test - Hebrew Support');
    ColorLog.CB('==================================================');
    
    try {
        // Test 1: Basic jsPDF functionality
        ColorLog.BW('📄 Testing jsPDF standalone PDF generation...');
        
        if (!jsPDF) {
            throw new Error('jsPDF module not available');
        }

        // Create new PDF document
        const doc = new jsPDF.jsPDF();
        
        // Add Hebrew text (note: jsPDF has limited RTL support)
        doc.setFontSize(16);
        doc.text('PDF Test Document', 20, 20);
        doc.text('Generated by RunCodeV3', 20, 35);
        
        // Add timestamp
        const timestamp = moment().format('YYYY-MM-DD HH:mm:ss');
        doc.text('Generated: ' + timestamp, 20, 50);
        
        // Add some test content
        doc.setFontSize(12);
        doc.text('This is a standalone PDF generated without external binaries.', 20, 70);
        doc.text('The executable is completely self-contained.', 20, 85);
        
        // Hebrew text (may have display limitations in jsPDF)
        doc.text('Hebrew test: שלום עולם', 20, 100);
        doc.text('Date in Hebrew format: ' + moment().format('DD/MM/YYYY'), 20, 115);
        
        // Add some data
        doc.text('Sample Data:', 20, 135);
        doc.text('• Module count: ' + Object.keys(global).length, 25, 150);
        doc.text('• Test timestamp: ' + Date.now(), 25, 165);
        doc.text('• Platform: ' + process.platform, 25, 180);
        
        // Save the PDF
        const filename = `standalone_hebrew_test_${moment().format('YYYYMMDD_HHmmss')}.pdf`;
        const pdfBuffer = doc.output('arraybuffer');
        
        // Write to file using fsExtra
        await fsExtra.writeFile(filename, Buffer.from(pdfBuffer));
        
        // Check file stats
        const stats = await fsExtra.stat(filename);
        
        ColorLog.GW(`✅ Standalone PDF generated successfully!`);
        ColorLog.GW(`📁 File: ${filename}`);
        ColorLog.GW(`📊 Size: ${Math.round(stats.size / 1024)} KB`);
        ColorLog.GW(`⏰ Created: ${stats.birthtime}`);
        
        return {
            success: true,
            filename: filename,
            size: stats.size,
            method: 'jsPDF (standalone)'
        };
        
    } catch (error) {
        ColorLog.RW('❌ Standalone PDF generation failed:', error.message);
        throw error;
    }
}

async function testAdvancedStandalonePdf() {
    ColorLog.BW('📄 Testing advanced standalone PDF features...');
    
    try {
        const doc = new jsPDF.jsPDF();
        
        // Set document properties
        doc.setProperties({
            title: 'RunCodeV3 Test Document',
            subject: 'Standalone PDF Generation Test',
            author: 'RunCodeV3 System',
            creator: 'jsPDF Library'
        });
        
        // Add header
        doc.setFontSize(20);
        doc.text('RunCodeV3 Standalone Test', 20, 30);
        
        // Add line
        doc.line(20, 35, 190, 35);
        
        // Add content sections
        doc.setFontSize(14);
        doc.text('System Information:', 20, 50);
        
        doc.setFontSize(11);
        doc.text(`Node Version: ${process.version}`, 25, 65);
        doc.text(`Platform: ${process.platform} ${process.arch}`, 25, 75);
        doc.text(`Memory Usage: ${Math.round(process.memoryUsage().rss / 1024 / 1024)} MB`, 25, 85);
        doc.text(`Uptime: ${Math.round(process.uptime())} seconds`, 25, 95);
        
        // Add modules section
        doc.setFontSize(14);
        doc.text('Loaded Modules:', 20, 115);
        
        doc.setFontSize(11);
        const moduleNames = ['sql', 'moment', 'fsExtra', 'XLSX', 'jsPDF', 'nodemailer'];
        moduleNames.forEach((name, index) => {
            const status = global[name] ? '✓' : '✗';
            doc.text(`${status} ${name}`, 25, 130 + (index * 10));
        });
        
        // Add timestamp in multiple formats
        doc.setFontSize(14);
        doc.text('Timestamp Information:', 20, 200);
        
        doc.setFontSize(11);
        doc.text(`ISO: ${new Date().toISOString()}`, 25, 215);
        doc.text(`Local: ${new Date().toString()}`, 25, 225);
        doc.text(`Unix: ${Math.floor(Date.now() / 1000)}`, 25, 235);
        
        if (moment) {
            doc.text(`Moment: ${moment().format('LLLL')}`, 25, 245);
        }
        
        // Save advanced PDF
        const filename = `advanced_standalone_${moment().format('YYYYMMDD_HHmmss')}.pdf`;
        const pdfBuffer = doc.output('arraybuffer');
        
        await fsExtra.writeFile(filename, Buffer.from(pdfBuffer));
        
        const stats = await fsExtra.stat(filename);
        
        ColorLog.GW(`✅ Advanced standalone PDF generated!`);
        ColorLog.GW(`📁 File: ${filename}`);
        ColorLog.GW(`📊 Size: ${Math.round(stats.size / 1024)} KB`);
        
        return {
            success: true,
            filename: filename,
            size: stats.size,
            method: 'jsPDF Advanced (standalone)'
        };
        
    } catch (error) {
        ColorLog.RW('❌ Advanced standalone PDF generation failed:', error.message);
        throw error;
    }
}

// Main execution function
async function runStandalonePdfTests() {
    const results = [];
    
    try {
        // Test basic standalone PDF generation
        const basicResult = await testStandalonePdfGeneration();
        results.push(basicResult);
        
        // Test advanced features
        const advancedResult = await testAdvancedStandalonePdf();
        results.push(advancedResult);
        
        // Summary
        ColorLog.GB('📋 STANDALONE PDF TEST RESULTS');
        ColorLog.GB('================================');
        
        results.forEach((result, index) => {
            ColorLog.GW(`${index + 1}. ${result.method}`);
            ColorLog.GW(`   ✅ Success: ${result.success}`);
            ColorLog.GW(`   📁 File: ${result.filename}`);
            ColorLog.GW(`   📊 Size: ${Math.round(result.size / 1024)} KB`);
            ColorLog.GW('');
        });
        
        const totalSize = results.reduce((sum, r) => sum + r.size, 0);
        ColorLog.GB(`📊 Total generated: ${results.length} PDFs, ${Math.round(totalSize / 1024)} KB`);
        ColorLog.GB('✅ All standalone PDF tests completed successfully!');
        
    } catch (error) {
        ColorLog.RW('❌ Error in standalone PDF test:', error.message);
        ColorLog.RW(error.stack);
    }
}

// Execute the test
runStandalonePdfTests().catch(error => {
    ColorLog.RW('❌ Fatal error in standalone PDF tests:', error.message);
});